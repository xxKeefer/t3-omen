// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                   String                 @id @default(cuid())
  cursor               Int                    @unique @default(autoincrement())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  role                 String                 @default("user")
  accounts             Account[]
  sessions             Session[]
  characterSheetConfig CharacterSheetConfig[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CharacterSheetConfig {
  id           Int         @id @default(autoincrement())
  createdBy    User        @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String      
  campaignName String
  aspects      Aspects?
  approaches   Approaches?
  skills       Skill[]

  @@index([createdById])
}

model Aspects {
  id         Int                  @id @default(autoincrement())
  configId   Int                  @unique
  config     CharacterSheetConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  concept    String
  trouble    String
  profession String
  reputation String
  loyalty    String
}

model Approaches {
  id          Int                  @id @default(autoincrement())
  configId    Int                  @unique
  config      CharacterSheetConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  heroic      String
  expert      String
  patient     String
  brilliant   String
  influential String
}

model Skill {
  id       Int                  @id @default(autoincrement())
  configId Int                  
  config   CharacterSheetConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  replaces SkillName
  name     String
  approach Approach
  talent   Approach

  @@unique([configId, replaces])
}

enum Approach {
  heroic
  expert
  patient
  brilliant
  influential
}

enum SkillName {
  might
  speed
  guts
  strike
  composure
  target
  nimble
  precision
  operate
  deceive
  principle
  sneak
  search
  decipher
  rapport
  anatomy
  savvy
  protocol
  academics
  lore
  threaten
  convince
  intuition
  networking
  presence
}
